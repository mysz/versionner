{"name":"Versionner","tagline":"Manipulating versions is easy","body":"versionner\r\n==========\r\n\r\n`versionner` helps manipulating version of the project.\r\n\r\nWith one command you can update all required files and git with new version.\r\n\r\nCurrent stable version\r\n----------------------\r\n\r\n1.3.0\r\n\r\nFeatures\r\n--------\r\n\r\n* `versionner` guards the compliance with [Semantic Versioning](http://semver.org/)\r\n* manual changes are error-prone, `versionner` is error proof\r\n* it's easier to write: `ver up` instead of open editor, edit and\r\n    save changes ;)\r\n* `versionner` updates also project files (like README or sth)\r\n* and create vcs (only git currently) tag if requested\r\n* it's [very easy to install](#installation)\r\n* and it's all in one command...\r\n\r\nPython version\r\n--------------\r\n\r\n`versionner` works only with Python 3.3+. Older versions are unsupported.\r\n\r\nSome examples\r\n-------------\r\n\r\nSome examples:\r\n\r\n    # initialize new file with version 0.1.0\r\n    % ver init\r\n    \r\n    # initialize new file with version 1.0.0\r\n    % ver init 1.0.0\r\n\r\n    # prints current version info\r\n    % ver\r\n    \r\n    # increase minor by 1, set patch to 0\r\n    % ver up\r\n    \r\n    # increase patch by 1\r\n    % ver up --patch\r\n    \r\n    # increase patch by 2 and try to automatically commit changes\r\n    % ver up --patch -c\r\n    \r\n    # create git tag\r\n    % ver tag\r\n    \r\n    # increase patch by 4\r\n    % ver up --patch 4\r\n     \r\n    # just guess...\r\n    % ver set --minor 3 --patch 2 --build asd3f\r\n        \r\n    # set version to 1.0.0\r\n    % ver set 1.0.0\r\n    \r\n    # create signed VCS tag\r\n    % ver tag --vcs-param -s\r\n\r\nMore\r\n----\r\n\r\nEverything is in help :) Just execute:\r\n\r\n    ver --help\r\n\r\nLook at result:\r\n\r\n    % ver --help\r\n    usage: ver [-h] [--file VERSION_FILE] [--version] [--date-format DATE_FORMAT]\r\n               [--vcs-engine VCS_ENGINE] [--vcs-commit-message VCS_COMMIT_MESSAGE]\r\n               [--verbose]\r\n               {init,up,set,tag} ...\r\n    \r\n    Helps manipulating version of the project\r\n    \r\n    positional arguments:\r\n      {init,up,set,tag}\r\n        init                Create new version file\r\n        up                  Increase version\r\n        set                 Set version to specified one\r\n        tag                 Create VCS tag with current version\r\n    \r\n    optional arguments:\r\n      -h, --help            show this help message and exit\r\n      --file VERSION_FILE, -f VERSION_FILE\r\n                            path to file where version is saved\r\n      --version, -v         show program's version number and exit\r\n      --date-format DATE_FORMAT\r\n                            Date format used in project files\r\n      --vcs-engine VCS_ENGINE\r\n                            Select VCS engine (only git is supported currently)\r\n      --vcs-commit-message VCS_COMMIT_MESSAGE, -m VCS_COMMIT_MESSAGE\r\n                            Commit message used when committing changes\r\n      --verbose             Be more verbose if it's possible\r\n\r\n      \r\nSo, there are four commands: `init`, `up`, `set` and `tag`. We want to look at this:\r\n\r\n    usage: ver init [-h] [--commit] [value]\r\n    \r\n    positional arguments:\r\n      value         Initial version\r\n    \r\n    optional arguments:\r\n      -h, --help    show this help message and exit\r\n      --commit, -c  Commit changes done by `up` command (only if there is no\r\n                    changes in repo before)\r\n\r\n    usage: ver up [-h] [--commit] [--major | --minor | --patch] [value]\r\n    \r\n    positional arguments:\r\n      value         Increase version by this value (default: 1)\r\n    \r\n    optional arguments:\r\n      -h, --help    show this help message and exit\r\n      --commit, -c  Commit changes done by `up` command (only if there is no\r\n                    changes in repo before)\r\n      --major, -j   increase major part of version\r\n      --minor, -n   increase minor part of version (project default)\r\n      --patch, -p   increase patch part of version\r\n\r\n    % ver set --help\r\n    usage: ver set [-h] [--major MAJOR] [--minor MINOR] [--patch PATCH]\r\n                   [--prerelease PRERELEASE] [--build BUILD] [--commit]\r\n                   [value]\r\n    \r\n    positional arguments:\r\n      value                 set version to this value\r\n    \r\n    optional arguments:\r\n      -h, --help            show this help message and exit\r\n      --major MAJOR, -j MAJOR\r\n                            set major part of version to MAJOR\r\n      --minor MINOR, -n MINOR\r\n                            set minor part of version to MINOR\r\n      --patch PATCH, -p PATCH\r\n                            set patch part of version to PATCH\r\n      --prerelease PRERELEASE, -r PRERELEASE\r\n                            set prerelease part of version to PRERELEASE\r\n      --build BUILD, -b BUILD\r\n                            set build part of version to BUILD\r\n      --commit, -c          Commit changes done by `set` command (only if there is\r\n                            no changes in repo before)\r\n                            \r\n    % ver tag --help\r\n    usage: ver tag [-h] [--vcs-tag-param VCS_TAG_PARAMS]\r\n    \r\n    optional arguments:\r\n      -h, --help            show this help message and exit\r\n      --vcs-tag-param VCS_TAG_PARAMS\r\n                            Additional params for VCS for \"tag\" command\r\n\r\nConfiguration\r\n---------------------\r\n\r\nConfiguration is both: user-wide and project-wide.\r\n\r\nUser-wide is stored in `~/.versionner.rc` file, and project-wide is stored in\r\n`<PROJECT_ROOT>/.versionner.rc`. Projects' configuration is superior to user-wide.\r\n\r\nIt allows you also to modify other files specified in configuration.\r\n\r\n`.versionner.rc` is INI file in format:\r\n\r\n    [versionner]\r\n    file = ./VERSION\r\n    date_format = %Y-%m-%d\r\n    up_part = patch\r\n    ;default_init_version = 1.0.0\r\n    \r\n    [vcs]\r\n    engine = git\r\n    commit_message = '%s'\r\n    ;tag_params =\r\n    ;  -f\r\n    ;  --local-user=some-key-id\r\n    \r\n    [file:some/folder/some_file.py]\r\n    enabled = true\r\n    search = ^\\s*__version__\\s*=.*$\r\n    replace = __version__ = '%(version)s'\r\n    date_format = %Y-%m-%d\r\n    match = line\r\n    search_flags = \r\n    encoding = utf-8\r\n    \r\n    [file:2:some/folder/some_file.py]\r\n        enabled = true\r\n        search = ^\"Program is in version \\d+\\.\\d+\\.\\d+\"$\r\n        replace = \"Program is in version %(version)s\"\r\n        match = line\r\n        search_flags = \r\n        encoding = utf-8\r\n\r\nData in '[project]' section are default data for whole project.\r\n\r\nData in '[file:some/folder/some_file.py]' section are for single file from\r\nproject. You can specify here that file 'some/folder/some_file.py' have\r\nversion string (key: `enabled`), has encoding `encoding` and we have to\r\nsearch for it (`search`) and replace it with value of `replace`. If `match` is\r\n'line', then `search` is matched line by line, and for 'file' whole file is\r\nread into memory and matched against `search`.\r\n\r\nIf you must do more replaces in single file, just add number to section name:\r\n\r\n    [file:2:some/path]\r\n\r\nInstallation\r\n------------\r\n\r\n1. Using PIP\r\n\r\n`versionner` should work on any platform where [Python](http://python.org)\r\nis available, it means Linux, Windows, MacOS X etc. \r\n\r\nSimplest way is to use Python's built-in package system:\r\n\r\n    pip3 install versionner\r\n\r\n2. Using sources\r\n\r\nDownload sources from [Github](https://github.com/mysz/versionner/archive/1.3.0.zip):\r\n\r\n    wget -O 1.3.0.zip https://github.com/mysz/versionner/archive/1.3.0.zip\r\n    \r\nor\r\n\r\n    curl -o 1.3.0.zip https://github.com/mysz/versionner/archive/1.3.0.zip\r\n\r\nUnpack:\r\n\r\n    unzip 1.3.0.zip\r\n\r\nAnd install\r\n\r\n    cd versionner-1.3.0\r\n    python3 setup.py install\r\n\r\nVoila!\r\n\r\nAuthors\r\n-------\r\n\r\nMarcin Sztolcman <marcin@urzenia.net>\r\n\r\nContact\r\n-------\r\n\r\nIf you like or dislike this software, please do not hesitate to tell me about\r\nthis me via email (marcin@urzenia.net).\r\n\r\nIf you find bug or have an idea to enhance this tool, please use GitHub's\r\n[issues](https://github.com/mysz/versionner/issues).\r\n\r\nLicense\r\n-------\r\n\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2015 Marcin Sztolcman\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of\r\nthis software and associated documentation files (the \"Software\"), to deal in\r\nthe Software without restriction, including without limitation the rights to\r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\r\nthe Software, and to permit persons to whom the Software is furnished to do so,\r\nsubject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\r\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\r\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\nChangeLog\r\n---------\r\n\r\n### v1.3.0\r\n\r\n* Allow to automatically commit changes done by commands: up, set, init\r\n* Rewritten VCS subsystem, allows now for many engines\r\n\r\n### v1.2.0\r\n\r\n* Allow to make more then one replace in single file\r\n* Do not show an exception when version file does not exists\r\n* PEP8 fixes (coding style)\r\n* Makefile improvements\r\n\r\n### v1.1.1\r\n\r\n* minor fixes\r\n\r\n### v1.1.0\r\n\r\n* refactored codebase from one file to one package with few files\r\n\r\n### v1.0.7\r\n\r\n* fights with enforcing Python3\r\n\r\n### v1.0.6\r\n\r\n* fights with enforcing Python3\r\n\r\n### v1.0.5\r\n\r\n* fights with enforcing Python3\r\n\r\n### v1.0.4\r\n\r\n* fights with enforcing Python3 \r\n\r\n### v1.0.3\r\n\r\n* many ways to tell to use Python3.3+ for versionner\r\n* Makefile refinements\r\n\r\n### v1.0.2\r\n\r\n* README fixes\r\n* Makefile\r\n\r\n### v1.0.1\r\n\r\n* nothing changed, just for PYPI\r\n\r\n### v1.0.0\r\n\r\n* added `tag` command (creates vcs (only git currently) tag)\r\n* versionner's app now is called 'ver', 'versionner' is deprecated\r\n* ability to set default value for `init` command in `.versionner.rc`\r\n\r\n### v0.4.3\r\n\r\n* do not fail when VERSION file is missing\r\n* automatically use python3 (shebang)\r\n* updated program description in help\r\n\r\n### v0.4.2\r\n\r\n* published on pypi\r\n\r\n### v0.4.1\r\n\r\n* copy file permissions to new one when updating project files\r\n\r\n### v0.4.0\r\n\r\n* first public version\r\n","google":"UA-207617-22","note":"Don't delete this file! It's used internally to help with page regeneration."}